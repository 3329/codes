1. 什么是 DLL？
	DLL 是一个包含可由多个程序同时使用的代码和数据的库。
	例如，在 Windows 操作系统中，Comdlg32 DLL 执行与对话框有关的常见函数。
	因此，每个程序都可以使用该 DLL 中包含的功能来实现“打开”对话框。
	这有助于促进代码重用和内存的有效使用。

	通过使用 DLL，程序可以实现模块化，由相对独立的组件组成。
	例如，一个计帐程序可以按模块来销售。可以在运行时将各个模块加载到主程序中（如果安装了相应模块）。
	因为模块是彼此独立的，所以程序的加载速度更快，而且模块只在相应的功能被请求时才加载。

	此外，可以更为容易地将更新应用于各个模块，而不会影响该程序的其他部分。
	例如，您可能具有一个工资计算程序，而税率每年都会更改。
	当这些更改被隔离到 DLL 中以后，您无需重新生成或安装整个程序就可以应用更新。

-----------------------------------------------------------------
2. DLL 的优点

	a.使用较少的资源
		当多个程序使用同一个函数库时，DLL 可以减少在磁盘和物理内存中加载的代码的重复量。
		这不仅可以大大影响在前台运行的程序，而且可以大大影响其他在 Windows 操作系统上运行的程序。
	b.推广模块式体系结构
		DLL 有助于促进模块式程序的开发。
		这可以帮助您开发要求提供多个语言版本的大型程序或要求具有模块式体系结构的程序。
		模块式程序的一个示例是具有多个可以在运行时动态加载的模块的计帐程序。
	c.简化部署和安装
	当 DLL 中的函数需要更新或修复时，部署和安装 DLL 不要求重新建立程序与该 DLL 的链接。
	此外，如果多个程序使用同一个 DLL，那么多个程序都将从该更新或修复中获益。
	当您使用定期更新或修复的第三方 DLL 时，此问题可能会更频繁地出现。

-----------------------------------------------------------------
3. DLL 依赖项

	当某个程序或 DLL 使用其他 DLL 中的 DLL 函数时，就会创建依赖项。
	因此，该程序就不再是独立的，并且如果该依赖项被损坏，该程序就可能遇到问题。
	例如，如果发生下列操作之一，则该程序可能无法运行：
		a.依赖 DLL 升级到新版本。
		b.修复了依赖 DLL。
		c.依赖 DLL 被其早期版本覆盖。
		d.从计算机中删除了依赖 DLL。
	这些操作通常称为 DLL 冲突。如果没有强制实现向后兼容性，则该程序可能无法成功运行。

-----------------------------------------------------------------
4. DLL 开发

本节介绍您在开发自己的 DLL 时应该考虑的问题和要求。
DLL 的类型

当您在应用程序中加载 DLL 时，可以使用两种链接方法来调用导出的 DLL 函数。这两种链接方法是加载时动态链接和运行时动态链接。
加载时动态链接
在加载时动态链接中，应用程序像调用本地函数一样对导出的 DLL 函数进行显式调用。要使用加载时动态链接，请在编译和链接应用程序时提供头文件 (.h) 和导入库文件 (.lib)。当您这样做时，链接器将向系统提供加载 DLL 所需的信息，并在加载时解析导出的 DLL 函数的位置。
运行时动态链接
在运行时动态链接中，应用程序调用 LoadLibrary 函数或 LoadLibraryEx 函数以在运行时加载 DLL。成功加载 DLL 后，可以使用 GetProcAddress 函数获得要调用的导出的 DLL 函数的地址。在使用运行时动态链接时，无需使用导入库文件。

下面的列表说明了有关何时使用加载时动态链接以及何时使用运行时动态链接的应用程序条件：
启动性能
如果应用程序的初始启动性能很重要，则应使用运行时动态链接。
易用性
在加载时动态链接中，导出的 DLL 函数类似于本地函数。这使您可以方便地调用这些函数。
应用程序逻辑
在运行时动态链接中，应用程序可以分支，以便按照需要加载不同的模块。在开发多语言版本时，这一点很重要。
DLL 入口点

在创建 DLL 时，可以有选择地指定入口点函数。当进程或线程将它们自身附加到 DLL 或者将它们自身从 DLL 分离时，将调用入口点函数。您可以使用入口点函数根据 DLL 的需要来初始化数据结构或者销毁数据结构。此外，如果应用程序是多线程的，则可以在入口点函数中使用线程本地存储 (TLS) 来分配各个线程专用的内存。下面的代码是一个 DLL 入口点函数的示例。
BOOL APIENTRY DllMain(
HANDLE hModule,	// Handle to DLL module
	DWORD ul_reason_for_call,	// Reason for calling function
		LPVOID lpReserved ) // Reserved
		{
				switch ( ul_reason_for_call )
						{
									case DLL_PROCESS_ATTACHED:
											// A process is loading the DLL.
													break;
															case DLL_THREAD_ATTACHED:
																	// A process is creating a new thread.
																			break;
																					case DLL_THREAD_DETACH:
																							// A thread exits normally.
																									break;
																											case DLL_PROCESS_DETACH:
																													// A process unloads the DLL.
																															break;
																																}
																																	return TRUE;
		}
		当入口点函数返回 FALSE 值时，如果您使用的是加载时动态链接，则应用程序不启动。如果您使用的是运行时动态链接，则只有个别 DLL 不会加载。

		入口点函数只应执行简单的初始化任务，不应调用任何其他 DLL 加载函数或终止函数。例如，在入口点函数中，不应直接或间接调用 LoadLibrary 函数或 LoadLibraryEx 函数。此外，不应在进程终止时调用 FreeLibrary 函数。

		注意：在多线程应用程序中，请确保将对 DLL 全局数据的访问进行同步（线程安全），以避免可能的数据损坏。为此，请使用 TLS 为各个线程提供唯一的数据。
		导出 DLL 函数

		要导出 DLL 函数，您可以向导出的 DLL 函数中添加函数关键字，也可以创建模块定义文件 (.def) 以列出导出的 DLL 函数。

		要使用函数关键字，您必须使用以下关键字来声明要导出的各个函数：
		__declspec(dllexport)
		要在应用程序中使用导出的 DLL 函数，您必须使用以下关键字来声明要导入的各个函数：
		__declspec(dllimport)
		通常情况下，您最好使用一个包含 define 语句和 ifdef 语句的头文件，以便分隔导出语句和导入语句。

		您还可以使用模块定义文件来声明导出的 DLL 函数。当您使用模块定义文件时，您不必向导出的 DLL 函数中添加函数关键字。在模块定义文件中，您可以声明 DLL 的 LIBRARY 语句和 EXPORTS 语句。下面的代码是一个定义文件的示例。
		// SampleDLL.def
		//
		LIBRARY "sampleDLL"

		EXPORTS
		  HelloWorld
		  示例 DLL 和应用程序

		  在 Microsoft Visual C++ 6.0 中，可以通过选择“Win32 动态链接库”项目类型或“MFC 应用程序向导 (dll)”来创建 DLL。

		  下面的代码是一个在 Visual C++ 中通过使用“Win32 动态链接库”项目类型创建的 DLL 的示例。
		  // SampleDLL.cpp
		  //

#include "stdafx.h"
#define EXPORTING_DLL
#include "sampleDLL.h"

BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
					                          LPVOID lpReserved
											  					 )
{
	    return TRUE;
}

void HelloWorld()
{
		MessageBox( NULL, TEXT("Hello World"), TEXT("In a DLL"), MB_OK);
}
// File: SampleDLL.h
//
#ifndef INDLL_H
#define INDLL_H

#ifdef EXPORTING_DLL
extern __declspec(dllexport) void HelloWorld() ;
#else
extern __declspec(dllimport) void HelloWorld() ;
#endif

#endif
下面的代码是一个“Win32 应用程序”项目的示例，该示例调用 SampleDLL DLL 中的导出 DLL 函数。
// SampleApp.cpp 
//

#include "stdafx.h"
#include "sampleDLL.h"

int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
					                      LPSTR     lpCmdLine,
										                       int       nCmdShow)
{ 	
		HelloWorld();
			return 0;
}
注意：在加载时动态链接中，您必须链接在生成 SampleDLL 项目时创建的 SampleDLL.lib 导入库。

在运行时动态链接中，您应使用与以下代码类似的代码来调用 SampleDLL.dll 导出 DLL 函数。
...
typedef VOID (*DLLPROC) (LPTSTR);
...
HINSTANCE hinstDLL;
DLLPROC HelloWorld;
BOOL fFreeDLL;

hinstDLL = LoadLibrary("sampleDLL.dll");
if (hinstDLL != NULL)
{
	    HelloWorld = (DLLPROC) GetProcAddress(hinstDLL, "HelloWorld");
		    if (HelloWorld != NULL)
				        (HelloWorld);

						    fFreeDLL = FreeLibrary(hinstDLL);
}
...
当您编译和链接 SampleDLL 应用程序时，Windows 操作系统将按照以下顺序在下列位置中搜索 SampleDLL DLL：
应用程序文件夹
当前文件夹
Windows 系统文件夹

注意：GetSystemDirectory 函数返回 Windows 系统文件夹的路径。
Windows 文件夹

注意：GetWindowsDirectory 函数返回 Windows 文件夹的路径。

