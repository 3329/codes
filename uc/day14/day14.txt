一.网络结构
		1.网络的7层协议栈
				ISO模型				应用模型
				物理层
				链路层(硬件寻址)		数据链路层       传输目的
				网络					IP网络层	    传输方式
				传输层					协议传输层	    传输含义
				会话层					应用开发层       传输作用
				表示层
				应用层		
		2.
		数据链路层  	    传输目的            ARP协议
		IP网络层			传输方式			IP协议
		协议传输层			传输含义		 	UDP协议TCP协议ICMP 
		应用开发层			传输作用			HTTP FTP ...	
		
		网络安全<-协议传输层->网络通信

二.UDP编程
		UDP采用的是一对一的Socket编程模型.
		A				<-				 B
		socket						 socket
		通信地址					 通信地址
		bind							
		recv/recvfrom				 sendto
		close           	    	 close
	案例：
			A:接收数据
			B:发送数据(键盘)	
		
		1.recv/recvfrom的使用
				a.recv与recvfrom都是接收数据
				recvfrom在接收数据的同时还可以得到发送数据端的通信地址。
				b.recv比read多一个int flag参数
					参数控制接收方式.
					当flag=0的时候read=recv
				c.recv的接收方式：
						MSG_WAITALL:保证缓冲填满recv才返回	
							        建议在取固定长度的数据使用
						MSG_PEEK:
						MSG_DONTWAIT:					
							
		2.send/sendto的使用 
		
		3.send/sendto与connect的关系
				connect+write=sendto
				connect+send=sendto
			在UDP强烈建议不要使用connect.
				原因:connect建立状态,频繁修改A端的设置(导致性能降低)	
			
			send与sendto发送的时候会自动绑定一个通信地址，其中的端口是随机的。
				
		4.UDP通信的特点(双工)
				a.无状态
				b.数据有边界(每发送一次就是一次边界)
				c.数据无序（每个数据经过路由不同，导致先发的数据比后发的数据后到）
				d.数据不安全（有可能丢失,与本身协议有很大关系）
		
	mistarena2009	
		

三.TCP编程
		1.TCP通信特点：
				a.有状态
				b.数据无边界（字节流）
				c.数据有序(先发的数据在前面)
				d.数据安全
		2.模型
				Server          Client
				socket			socket
				bind			connect
				listen
				accept
				recv/send		recv/send
				close			close
				close
		3.案例：
					体会：有状态，无边界
		4.TCP对数据的处理：
				由于TCP数据无边界,所以存在如下问题：
					发送整数，收到的是一个完整的整数？
				接收数据：
					a.固定长度的数据类型   MSG_WAITALL接收固定长度的数据
					b.非固定长度的数据类型		
						长度+数据	
							
				1.基本类型				
				3.结构体
				2.字符串
				4.文件
	案例：
				TCP传递文件。
						首先传递文件名，在传递文件内容。
				分析：
					难点：
						接收方不知道文件名长度？
						接收方不知道文件结束的位置？
				解决方案：
					 用定长确定不定长
				应用：
						long+char[]
						[长度+数据]
				步骤：(服务器端接收文件)
				
						发送文件名长度
						发送文件名
						发送文件长度
						发送文件内容
							(客户发送文件)
						接收文件名长度
						接收文件名
						接收文件长度
						接收文件内容	
					数据包：用户协议
					
					
									
四.UDP与TCP编程的区别
			状态
			边界
			有序
			安全			

五.TCP服务器编程模式
		TCP的服务器端怎么处理多个客户连接的数据？
		1.多进程
				多进程处理服务器的多客户.
模型：
		每接收到一个客户，建立子进程，读写数据。 	
流程
		a.建立socket
		b.绑定地址
		c.监听
		d.循环接收客户连接
		e.建立新的进程
				e1.接收客户数据	
				e2.广播客户数据		

		关键点：维护所有客户的连接（客户的描述符号）
									
		2.异步IO
		3.多线程
		
		4.进程池
		5.线程池
		
		

作业：
	课堂聊天程序有什么问题？
	思考：
				问题产生的原因？
				怎么解决？
