1.MAKEFILES变量
		如果在当前环境定义了一个“MAKEFILES”环境变量，
		make执行时首先将此变量的值作为需要读入的
		Makefile文件，
		多个文件之间使用空格分开。
		
2.变量 MAKEFILE_LIST
		make程序在读取多个makefile文件时，
		包括由环境变量“MAKEFILES”指定、命令行指、
		当前工作下的默认的以及使用指示符“include”指定包含的，
		在对这些文件进行解析执行之前make读取的文件名将会被自动依次追加到变量“MAKEFILE_LIST”的定义域中。
3.特殊的变量
		$@ 表示规则中的目标文件名 
		$< 表示第一个依赖文件的名字
		$+ 表示所有依赖文件的集合
		$^ 表示所有依赖文件的集合，去掉了重复的文件名
		$? 表示所有比目标文件新的依赖文件的集合，去掉了重复的文件名
		
		$(@D)
			表示目标文件的目录部分（不包括斜杠）。如果“$@”是“dir/foo.o”，那么“$(@D)”的值为“dir”。如果“$@”不存在斜杠，其值就是“.”（当前目录）。注意它和函数“dir”的区别！
		$(@F)
			目标文件的完整文件名中除目录以外的部分（实际文件名）。如果“$@”为“dir/foo.o”，那么“$(@F)”只就是“foo.o”。“$(@F)”等价于函数“$(notdir $@)”。
		$(%D)
		$(%F)
			当以如“archive(member)”形式静态库为目标时，分别表示库文件成员“member”名中的目录部分和文件名部分。它仅对这种形式的规则目标有效。
		$(<D)
		$(<F)
			分别表示规则中第一个依赖文件的目录部分和文件名部分。
		$(^D)
		$(^F)
			分别表示所有依赖文件的目录部分和文件部分（不存在同一文件）。
		$(+D)
		$(+F)
			分别表示所有依赖文件的目录部分和文件部分（可存在重复文件）。
		$(?D)
		$(?F)
			分别表示被更新的依赖文件的目录部分和文件名部分。
		

4.隐藏变量
		隐含规则中所使用的变量（隐含变量）分为两类：1. 代表一个程序的名字（例如：“CC”代表了编译器这个可执行程序）。2. 代表执行这个程序使用的参数（例如：变量“CFLAGS”），多个参数使用空格分开。当然也允许在程序的名字中包含参数。但是这种方式建议不要使用。
		以下是一些作为程序名的隐含变量定义：
		代表命令的变量
		
		AR
			函数库打包程序，可创建静态库.a文档。默认是“ar”。
		AS
			汇编程序。默认是“as”。
		CC
			C编译程序。默认是“cc”。
		CXX
			C++编译程序。默认是“g++”。
		CO
			从 RCS中提取文件的程序。默认是“co”。
		CPP
			C程序的预处理器（输出是标准输出设备）。默认是“$(CC) -E”。
		FC
			编译器和预处理Fortran 和 Ratfor 源文件的编译器。默认是“f77”。
		GET
			从SCCS中提取文件程序。默认是“get”。
		LEX
			将 Lex 语言转变为 C 或 Ratfo 的程序。默认是“lex”。
		PC
			Pascal语言编译器。默认是“pc”。
		YACC
			Yacc文法分析器（针对于C程序）。默认命令是“yacc”。
		YACCR
			Yacc文法分析器（针对于Ratfor程序）。默认是“yacc -r”。
		MAKEINFO
			转换Texinfo源文件（.texi）到Info文件程序。默认是“makeinfo”。
		TEX
			从TeX源文件创建TeX DVI文件的程序。默认是“tex”。
		TEXI2DVI
			从Texinfo源文件创建TeX DVI 文件的程序。默认是“texi2dvi”。
		WEAVE
			转换Web到TeX的程序。默认是“weave”。
		CWEAVE
			转换C Web 到 TeX的程序。默认是“cweave”。
		TANGLE
			转换Web到Pascal语言的程序。默认是“tangle”。
		CTANGLE
			转换C Web 到 C。默认是“ctangle”。
		RM
			删除命令。默认是“rm -f”。
			命令参数的变量
		
		下边的是代表命令执行参数的变量。如果没有给出默认值则默认值为空。
		ARFLAGS
			执行“AR”命令的命令行参数。默认值是“rv”。
		ASFLAGS
			执行汇编语器“AS”的命令行参数（明确指定“.s”或“.S”文件时）。
		CFLAGS
			执行“CC”编译器的命令行参数（编译.c源文件的选项）。
		CXXFLAGS
			执行“g++”编译器的命令行参数（编译.cc源文件的选项）。
		COFLAGS
			执行“co”的命令行参数（在RCS中提取文件的选项）。
		CPPFLAGS
			执行C预处理器“cc -E”的命令行参数（C 和 Fortran 编译器会用到）。
		FFLAGS
			Fortran语言编译器“f77”执行的命令行参数（编译Fortran源文件的选项）。
		GFLAGS
			SCCS “get”程序参数。
		LDFLAGS
			链接器（如：“ld”）参数。
		LFLAGS
			Lex文法分析器参数。
		PFLAGS
			Pascal语言编译器参数。
		RFLAGS
			Ratfor 程序的Fortran 编译器参数。
		YFLAGS
			Yacc文法分析器参数。
			
5.变量取值
	MMEDIATE = DEFERRED								变量赋值
	IMMEDIATE ?= DEFERRED							变量没有定义才赋值	
	IMMEDIATE := IMMEDIATE 						立即展开
	IMMEDIATE += DEFERRED or IMMEDIATE
	define IMMEDIATE									多行定义
		DEFERRED
	endef
	
	define two-lines
	echo foo
	echo $(bar)
	endef
	使用变量
	$(two-lines)
		
6.变量替换
		bar := $(foo:.o=.c)
		bar := $(foo:%.o=%.c)

7.override 指示符
		override VARIABLE = VALUE
		override VARIABLE := VALUE
		override VARIABLE += MORE TEXT
		指示符“override”并不是用来调整Makefile和执行时命令参数的冲突，
		其存在的目的是为了使用户可以改变或者追加那些使用make的命令行指定的变量的定义。
		从另外一个角度来说，就是实现了在Makefile中增加或者修改命令行参数的一种机制。
8.系统环境变量
	make在运行时，系统中的所有环境变量对它都是可见的。在Makefile中，可以引用任何已定义的系统环境变量。

9.条件判定
		关键字“ifeq”
		关键字“ifneq”
				ifeq (ARG1, ARG2)
				ifeq 'ARG1' 'ARG2'
				ifeq "ARG1" "ARG2"
				ifeq "ARG1" 'ARG2'
				ifeq 'ARG1' "ARG2"
		关键字“ifdef”
		关键字“ifndef”
				ifdef VARIABLE-NAME
		
		例子:
10.+命令
		Make -t 文件
		+touch  文件
		更新文件后 +touch 文件也会强制执行。
11.Makefile函数
		
		