一、理解进程
		1.进程是执行中的程序。
		2.进程构成：代码空间，内存资源，CPU时间片段
		3.系统管理的基本单元。
			内存，定时器，文件描述符号，信号，代码空间都是以进程作为单位。
		      系统对所有执行程序的管理以进程为基本单位。
				1.进程属性
						用户（有效用户与实际用户）
						ID
						内存(虚拟内存   驻留内存)
						程序文件
						状态
						优先级
						时钟
						。。。。。。。
						
				2.进程属性采用结构体描述
				
				3.所以进程采用的是树状结构维护管理
					taskstruct
				4.进程状态	
					D:不可中断的sleep
					R:运行状态
					S:可中断睡眠
					T:暂停
					W:分页状态
					X:死亡状态
					Z:僵尸进程
					<:高优先级别
					N:低优先级别
					L:页锁定
					s:Session Leader
					l:多线程
					+:前台进程
					
					
		4.进程管理工具
				ps  aue
				top
				pstree=ptree		
		5.init进程
				根进程
				所有进程的父。
		6.父子进程
				被创建的进程称为子进程
				创建子进程的进程称为父进程。
				父子进程进程管理树上呈现父子关系。		
				
				
				jobs
				fg
				bg
		案例：
				1.进程为基本单位:不同进程内存是独立的。
						不同进程文件描述符号独立
				2.进程执行过程中有两个用户
						实际用户(执行用户)
						有效用户(权限用户)		
							
						uid_t getuid();
						uid_t geteuid();
											
二、进程创建
		pid_t fork();
		创建子进程，返回子进程ID。
		案例：
				1.创建子进程
				2.理解子进程的创建 
		创建的子进程与父进程使用的是相同的执行代码。
		fork的工作流程：
				创建子进程，把父进程的内存空间完全克隆到子进程的内存空间。
						a.代码怎么克隆
								逐字节拷贝.父子进程代码完全一样。
								代码的执行位置也被克隆。
								也就是子进程不会从main开始执行，而是从与父进程相同的位置开始执行。
								
								子进程从fork后开始执行。
								由于子进程没有执行fork，所以fork=函数在克隆子进程，把子进程中返回的进程ID初始化成0.
								
								父子进程代码是同时执行。
									可以使用子进程实现多任务。
									
						b.栈变量怎么克隆?
						c.堆变量怎么克隆?
						d.mmap映射的地址怎么克隆?
						e.文件描述符号的上下文环境怎么克隆?
						f.文件描述符号的读写位置怎么克隆?
									文件描述符号的上下文环境是同一个。没有克隆。	
						e.终端上下文环境怎么克隆的？
										0 1 2 指向同一个终端伪字符设备文件。
						
				
		

三、使用进程实现多任务
		
		案例1：
				使用多进程与Curses完成如下程序：
						在屏幕正中显示7位随机数
						在屏幕右上角显示时间。
						
				模式:
						1.多进程任务的框架
						2.在子进程创建前完成curses的所有初始化
						3.完成7位随机数的显示
						4.完成时间的显示.
		案例2：
				使用键盘的回车，停止随机数滚动/继续滚动模式：
						1.建立多任务进程的框架
						2.在子进程创建前完成Curses的所有初始化
						3.在一个进程完成7位随机数的显示
						4.在第二个进程完成按键操作。
				核心关键：
						建立共享的映射变量，通过这个变量达到一个进程控制另外一个进程。		

四、两个进程之间的关系
			1.父进程先于子进程结束
					父进程被系统释放，
					子进程称为根进程的子进程。
					称子进程为孤儿进程。
					孤儿进程没有危害。
					
					父进程退出怎么告之子进程呢？
							-信号.
					
			2.子进程先于父进程退出
					子进程资源已经释放
					但子进程在系统的进程管理树中占用一个节点。
					
					为什么系统不删除这个节点？
					系统保留这个节点有什么意义？
								让父进程处理子进程的退出。
								子进程退出发送信号给父进程。
										SIGCHILD
								便于父进程处理子进程完成的数据。
			3.信号处理：
					整数。
					kill -l 		

					信号处理的代码：函数
					函数原型
						void (*)(int s);
					
					注册信号函数signal
						信号被注册后，当信号发生，系统暂停进程，调用信号处理函数。函数处理完毕，继续执行原来的进程。
						
总结：
		1.孤儿进程没有危害
		2.僵尸进程是子进程先结束而产生的。
		3.僵尸进程不占用内存，CPU等资源
		4.但僵尸进程占用管理节点。
		5.要及时回收僵尸进程。
		6.理解系统为什么不主动回收僵尸进程。
		7.子进程结束会发送SIGCHLD信号给父进程
		8.使用wait函数回收僵尸进程。
		9.能处理SIGCHLD信号。
									

作业1：
		1.写多任务程序，查找1-10000之间所有孪生素数。
			素数查找由一个进程
			孪生素数的查找由另外一个进程完成。
		
		2.思考：
					理解僵尸进程。
					
					
