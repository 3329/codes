一.回顾：
		1.常用的内存分配方式还是malloc/free  new/delete。
		2.malloc/free new/delete分配内存该注意的地方。
		3.能访问的内存未必是正确。
		4.brk/sbrk的内存分配方式。
		5.使用mmap做匿名映射。（进程数据通信/IO）

二.进程的环境
		1.int main(int args,char**argv,char **arge)
		{
			
		}
		
		第一个参数是参数个数，至少是1，因为至少命令行指令别名
		第二个参数是命令行参数，第一个就是命令行的指令别名。
		第三个参数是环境变量。
		
		第二个与第三个参数是字符串数组。
				char**,char *arge[];
		环境变量与命令行字符串数组的格式：
				最后一个字符串必须使用空字符串表示结束。
		
		2.第二种环境变量的访问方式
				标准C中，定义了一个外部全局变量，存放环境变量char**environ
				在C程序的任何位置可以直接访问。
				
		3.环境变量的获取与设置
			setenv修改环境变量（只影响本程序）
				int setenv(const char *name,const char *value);
			getenv获取环境变量
				char *getenv(const char *name);
		 	
		 	unsetenv删除环境变量

二.异常处理方式		 		
	Unix/Linux 标准C的异常处理。
	异常处理：
		1.根据函数返回值判断异常。
				1.1.返回一般用户数据
								-1:表示异常,其他就是用户数据
				1.2.返回指针用户数据
								NULL指针，OXFFFFFFFF	指针表示错误
								其他就是指针用户数据.
				1.3.返回值不是用户数据，就是用来指明函数调用状态。
								0:成功
								-1:失败
				1.4.返回void。一般不会发生错误。
				
		2.使用外部全局变量errno获取异常原因。
				2.1.根据errno得到异常编号。
						errno在函数调用正确不会被修改。		
						绝对不要通过errno判定错误				
				2.2.把errno转换为字符串
						2.2.1.strerror函数
						char *strerror(int errnum);
						2.2.2.perror函数
						void perror(const char*msg);
						2.2.3.printf函数
						printf()的格式输出%m格式



三.补充printf的格式
		% 标记  长度  精度  长度修饰字  转换标识字
		标记:
				0
				#  自动添加前缀
				-  左对齐
			空格 在整数自动填充空白 		
				+ 自动添加正负号
				
		长度：
				整数
				*   使用最近参数表示长度 
				*整数$  使用参数指定位置作为长度	  位置从1			开始			
		精度：必须小数点开始
				.整数
				.*
				.*整数$
		长度修饰符号：
				h
				hh
				l
				ll
						
四.gcc编译器
		gcc是编译器 ld是连接器
	1.通用选项
			所有选项与选项值之间空格可以省略
			-O   优化选项  0 1 2 3  
			-g	 调试选项  0 1 2 3  只有这样编译连接的程序才能使用gdb工具调试.
			
			-Wall   警告
			-Werror	把警告当错误处理
			-w 			关闭警告
			
			-o 指定输出的文件名 
			
			-I 指定头文件所在的目录
					指定多个目录，多次使用-I选项
			
			 每个编译器有默认的头文件目录
			 		gcc的默认头文件目录：/usr/include
			 												 /user/include/c++
			 												 
			-std=语言版本
						c89 c99	
						restrict  c99语言标准
						restrict 用在函数指针参数前
			
			-x语言类型
					c c++  assembler none
					none自动根据扩展名采用不同的语言编译。
					注意：
							该选项必须在源代码文件名指定前设置。
			-pipe
					预编译，编译，汇编，连接中间不使用临时文件，上步骤结果使用管道输出到下步骤。
					加快编译连接速度。
			-c  只编译不连接		，生成目标文件.o
			-E  与编译	,编译的结果是标准O
						文件名-o   预编译的文件名 .i
						
			-S	汇编		*.s
			
	试验：
			体会编译连接的四个步骤

	2.预处理指令与预编译
			预编译主要处理预处理指令
			#warning "文本"
					预处理到该语句会输出警告
			#error  "文本"		
					预处理到该语句会输出错误，并停止预处理
			#line  整数
					控制预处理中警告与错误的行数输出。
			#pragma 
					C++标准允许不同厂商提供自己的扩展。
					编译器扩展尽量在#pragma中扩展.
		GCC提供#pragma指令扩展
				2.1.禁止某些标识字使用
					#pragma GCC poison  标识字
							注意：标识字不要使用""
				
				2.2.提示相关文件是否被修改		
					#pragma GCC dependency "相关文件"
			
	3.宏选项与内置宏		
			3.1.传统宏的定义
					#define  宏  宏的定义内容
			3.2.gcc的选项定义宏
					-D宏的名字=宏的定义内容
			3.3.C/C++编译器的内置宏（语言标准的一部分）
					__BASE_FILE__
					__DATE__
					__TIME__
					__FUNCTION__   __func__ 
					__LINE__  整数
					
					C++有关的宏
					__cplusplus
								判定宏是否被定义，该宏在C不存在
								
								存在：（值是整型）
										日期:C++版本
										1:不是标准C++
										
								
					
					
	4.编译与使用静态库library
		4.1.神马都是浮云【浮云=库】
			有时候需要把代码编译成多个文件。
			需要把某些特殊代码封装成独立文件。
			把单独封装的代码的结果称为库。
		4.2.库的方式
			a.静态库
				在连接的时候把库连接到执行文件。
			b.动态库[共享库]
				在连接的时候，不把库链接到执行文件，在程序执行时候动态调用。
		4.3.库的实现技术：
				a.静态库采用的是目标文件打包。
						静态库=目标文件归档
				b.动态库采用是没有main的执行文件格式
补充：
		Unix/Linux:执行格式：a.out  elf
		Window:执行格式 PE						
						
		4.4.编译静态库
				a.编译源代码为目标文件  gcc -c
				b.把目标文件归档为静态库  ar 
						ar  -r 归档后的文件名  被归档文件列表
						
				注意：静态库扩展名建议.a  (archive)
							库的命名规则. lib库名字.a[.主版本号.副版本号.批号]
				
				c.关于归档
						ar r 快速插入一个文件到归档
						   m 移动归档中的文件
						   d 删除归档中文件
						   q 追加一个文件到归档
						   x 从归档提取一个文件		 			
		4.5.使用静态库	
					a.调用静态库的程序
					b.在连接的时候使用静态库
								-l指定库名
								-L指定库所在目录
								
						-l -L建议在源代码后指定
								
					c.执行程序
					
					也可以把静态库当目标文件直接使用
	5.编译与使用共享库


作业：
		1.写一个程序，输入整数，打印以这个整数为半径的菱形。
				要求：整数的输入，菱形打印封装成静态库。		
							int InputInt(const char *info);
							void Diamond(int r);
		
	
	