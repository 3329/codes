一.内存管理
	1.内存管理方式				
			1.1.mmap/munmap
			1.2.sbrk/brk
			===========应用==============
			1.3.malloc/free
			1.4.new/delete
			1.5.stl(容器/迭代器/算法/函子/分配器/适配器)
			1.6.智能指针管理
			1.7.虚拟机
		案例1：
				观察程序运行的内存结构
				程序的内存：
						代码内存
						全局栈
						局部栈
						堆
		结论：
				每个进程启动会/proc目录建立一个进程为名字的目录
				有两个文件与内存有关:
						/proc/${pid}/mem
						/proc/${pid}/maps
						
				所有程序的代码空间首地址08048000		
				
				
		案例2：
				写一个程序观察不同变量所在内存位置
		结论：
				全局常量在代码内存区。
				局部常量在局部栈区。		
				
				函数都在代码区。
		
		
		补充：
				共享库(Shared Objective  Library)
				任何代码，函数必须连接到程序文件才能执行。		
				连接方式有两种：
							静态连接：使用连接器连接
							动态连接：在程序过程中加载并连接、
				动态链接库.elf能执行，但没有main入口，只能通过其他执行文件来执行。
							
				gcc编译器   
				ld 连接器		
								
								
						
	2.C的内存管理
			2.1.C的管理函数的回顾
					malloc  分配空间
					free	   释放空间
					calloc  分配空间
					realloc	释放/分配空间
			2.2.C++的内存管理
					new
					delete
					new[]
					delete[]
					new(void*)     定位分配
					new(void*)[]							
				案例：
						C的内存分配与C++的内存分配的区别
				结论：
						C与C++的内存分配与释放是一样
						C++调用malloc/free实现内存的管理
						malloc/calloc=new,new[]
						realloc/free=delete
						realloc/free=delete[]
						realloc=new(void*) 
				new比malloc多一个构造器调用。
					基本类型int调用默认构造器
				new[]比malloc多多个构造器调用。
				
				delete比free多析构器调用。
				delete[]多次调用析构器				
			2.3.内存的释放
						delete  free都不指定释放内存的大小。
						
					int *p=new int[30];
					
					
					delete p;delete[] p;
					
					
					malloc在后台的内存管理采用的是一个链表。
							 memstruct
							 {
							 		数据内存 4
							 		上一个内存地址 void*  4
							 		下一个内存地址 void*  4
							 		数据内存大小   unsigned int  4
							 }
				破坏这个结构的后果：
						free不知道怎么释放，释放多少。	
						
				结论：
						对new malloc分配的空间绝对不允许越界访问。		
			2.4.虚拟内存
				案例：
						体会虚拟内存的虚拟。
						
				结论：
						1.两个程序的相同的地址可能是不同的内存空间。
						2.地址指向的空间不同的原因：采用虚拟内存。
										程序使用地址物理上不存在。
										这种地址只有与某个物理地址关联才有意义。
										称为虚拟地址，虚拟地址表示的内存：虚拟内存。
						3.任何一个程序使用的地址都是独立虚拟的从0-4G大小的内存地址范围。
										虚拟地址与物理地址关联：内存影射。
										实际的物理地址：内存，磁盘，网卡存储器等。
										
										
										物理存储器与虚拟地址之间的影射由系统负责。				
						4.段错误:
									是因为虚拟地址没有影射到物理地址。
									
						5.虚拟内存从0-4G：平面内存			
						
			2.5.虚拟内存与内存管理基本单位
						2.5.1.错误的内存访问有：
								a.内存虚拟地址没有影射：不能访问
								b.内存地址访问不在框架下访问：非法访问
						       malloc初始化后，自动影射一个物理存储块。
						        大小根据系统内存而改变。
					
					经验：
							基本上所有的C标准C函数与系统函数，
							传递指针的时候，必须指定内存的大小。	
					内存影射：
							基本单位32位系统一般是4K。
							getpagesize();返回影射的基本单位：页（page）
										
							
	3.brk/sbrk的虚拟内存管理
				自己影射空间管理。
				练习：
						找出1-10000之间所有素数。保存到内存。
						然后打印。 
						
			3.1.brk/sbrk函数说明
				void *sbrk(int size);
							size=0;返回sbrk/brk后台的上次的末尾地址。
										 
										 
							size>0;影射空间不够，先影射
								然后分配，返回上次的末尾地址
							size<0;释放空间，返回上次的末尾地址。
														 		
				int brk(void* ptr)
						直接修改访问的有效范围的末尾地址
						释放空间形成一个完整的page，则该页影射被解除。
				返回：
						0：分配成功
						-1：失败，失败原因访问errno
								
							
		补充：
				Linux/Unix的数据类型
				pid_t     unsigned int
				size_t    unsigned int
				ssize_t   signed int
				offset_t	unsigned int			
				系统编程有独立的数据类型：
						a.维护
						b.移植
						c.可读性强
				系统的独立类型都是使用#define typedef重定义。
		今后看见不认识的类型是上次的shell程序查找该类型的原形。
						
					void *p=sbrk(0);
					
					brk(p+4);
					brk(p);
					brk(p+8);	
					
					int a[10][6];
					
					a[3]-a[1]=?;
				
				
	4.系统底层的内存映射
			mmap/munmap
			
			void *mmap(void*ptr,//指定影射虚拟地址，如果为0，则由系统指定。该地址建议使用sbrk(0)获取
							size_t len,影射空间大小。建议4k倍数，不是4K倍数，自动对齐。
							int prot,//影射内存的权限PROT_READ PROT_WRITE PROT_EXEC
							int mode,//影射方式：
													//影射的物理存储：MAP_ANONYMOUS使用物理内存影射，否则文件影射。
													//影射的保护权限:MAP_PRIVATE与MAP_SHARED
							int fd,		//只有在MAP_ANONYMOUS没有指定的时候有意义。指定要影射的文件描述符号
							off_t off);//文件的影射位置，必须是4K的倍数。
							
			
			返回：影射的空间的虚拟地址空间
					NULL：影射失败
	



作业：
			1.找出1-10000之间所有的孪生素数。
			2.使用不同影射方式与权限，观察分配的内存的权限改变。
			
Unix编程环境，
		异常处理。				
		gcc编译器与连接器及其其他工具nm ar ldd ldconfig readelf objdump 
				-共享库
				-静态库
